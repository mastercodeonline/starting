单调栈与队列
有单调不增的性质，搞清楚那边是不受影响的一方（开头或者结尾）
例如 决赛H题
题意
有一个果汁机，每分钟可以做一杯任意体积的果汁， 有n个人排成一队， 第i个人走到果汁机前的时刻为tᵢ,tᵢ单调不降， 若有tᵢ相等则按照i的顺序到达。每个人到达后会取走目前最大的果汁， 若体积≥aᵢ才会满意， 取不到果汁也会不满意。求能否使得所有人满意， 若能， 输出最少需要的果汁体积之和。
做法
果汁先被制作，后被人取走， 也就是说人对其到达之前制作的果汁产生作用， 这一特性提示我们从后往前考虑。
第二十二届电子科技大学 ACM 校赛官方题解
不妨倒着考虑每个精确到分钟的时间片。在这一分钟， 我们仅能制作一杯果汁。假设在这一分钟之后(包括这一分钟) 的时间中， 还有k个人的要求还没有得到满足， 这些人按照到达时间排好了顺序， 而它们对于果汁体积的要求分别是a_{1},a_{2}, \cdots ,a_{k}。从贪心的角度考虑， 我们一定会在这一时刻制作一杯果汁以满足一个人的要求， 否则把这些人留给更前面的时间片来处理只会越来越糟。
最理想的情况下， 其中每个人恰好会取走体积为(aᵢ的果汁。然而，由于用来满足(a₁∼k的果汁都在此刻之前被制作，也就是说，当第1个人到来时， 他会取走用来满足(a₁∼k的所有果汁中体积最大的那一杯。那么， 第i个人取走的果汁体积实际上只能是\max \{ a_{i},a_{i+1}, \cdots ,a_{k} \} 。也就是说， 某个人实际取走的果汁体积会受其之后的人的影响而增大。
第二十二届电子科技大学 ACM 校赛 官方题解
记bᵢ为第i个人实际取走的果汁体积。初始化bᵢ:=aᵢ,从后往前考虑每个时间片。对于每个时间片， 记此时间片内到达的人为i_{1},i_{2}, \cdots ,i_{k},记此时间片之后到达(不包含此时间片) 且未被满足的人的实际取走的果汁体积为 若此时新加入第iₖ个人， 那么我们执行b_{i_{k}}:= \max \{ b_{i_{k'}}b_{i_{k+1}}, \cdots ,b_{i_{k+lcn}} \} 。可以发现， 在[k,k+len]这一区间中， b是单调不升的， 因此实际上我们只需要执行b_{i_{k}}:=\max \{ b_{i_{k'}},b_{i_{k+1}} \} 。
于是我们可以用单调栈来维护当前未被满足的人的实际取走的果汁体积序列， 每次插入体积x时, 向栈顶插入的值为 max{x, stk[top]}(其中 stk[top]表示栈顶元素的值) ， 并且按照流逝的分钟数弹出对应数量的栈中元素。最终答案即为(bᵢ之和。
